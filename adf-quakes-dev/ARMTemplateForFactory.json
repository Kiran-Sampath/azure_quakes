{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-quakes-dev"
		},
		"ls_sql_quakes_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_sql_quakes'"
		},
		"ls_adls_quakes_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stquakesdev123.dfs.core.windows.net/"
		},
		"ls_http_usgs_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://earthquake.usgs.gov/"
		},
		"ls_sql_quakes_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sql-quake-dev.database.windows.net"
		},
		"ls_sql_quakes_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "quakesdb"
		},
		"ls_sql_quakes_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "KiranSampath"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_quakes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_USGS_to_Raw",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_usgs_json",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_adls_quakes",
								"type": "DatasetReference",
								"parameters": {
									"DirectoryPath": {
										"value": "@concat('raw/', formatDateTime(utcNow(), 'yyyy/MM/dd/HH'))\r\n",
										"type": "Expression"
									},
									"FileName": "earthquakes.json"
								}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy_USGS_to_Raw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_flatten_quakes",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"DirectoryPath": "@concat('raw/', formatDateTime(utcNow(), 'yyyy/MM/dd/HH'))",
										"FileName": "earthquakes.json"
									},
									"sink1": {},
									"regular": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ingestTime": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-12T18:32:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_usgs_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_adls_quakes')]",
				"[concat(variables('factoryId'), '/dataflows/df_flatten_quakes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adls_quakes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_adls_quakes",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DirectoryPath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DirectoryPath",
							"type": "Expression"
						},
						"fileSystem": "data"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_adls_quakes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_alerts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_quakes",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "earthquake_alerts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_quakes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_quakes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sql_quakes",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "earthquakes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sql_quakes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_usgs_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_http_usgs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "earthquakes/feed/v1.0/summary/all_hour.geojson"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_http_usgs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_adls_quakes')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_adls_quakes_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_http_usgs')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_http_usgs_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sql_quakes')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_sql_quakes_properties_typeProperties_server')]",
					"database": "[parameters('ls_sql_quakes_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_sql_quakes_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_sql_quakes_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_flatten_quakes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_adls_quakes",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_sql_alerts",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_sql_quakes",
								"type": "DatasetReference"
							},
							"name": "regular"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derive1"
						},
						{
							"name": "filterdq"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          bbox as double[],",
						"          features as (geometry as (coordinates as double[], type as string), id as string, properties as (alert as string, cdi as string, code as string, detail as string, dmin as double, felt as string, gap as short, ids as string, mag as double, magType as string, mmi as string, net as string, nst as short, place as string, rms as double, sig as short, sources as string, status as string, time as long, title as string, tsunami as boolean, type as string, types as string, tz as string, updated as long, url as string), type as string)[],",
						"          metadata as (api as string, count as short, generated as long, status as short, title as string, url as string),",
						"          type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'singleDocument') ~> source1",
						"source1 foldDown(unroll(features),",
						"     mapColumn(",
						"          id = features.id,",
						"          properties_time = features.properties.time,",
						"          properties_updated = features.properties.updated,",
						"          mag = features.properties.mag,",
						"          place = features.properties.place,",
						"          url = features.properties.url,",
						"          felt = features.properties.felt,",
						"          tsunami = features.properties.tsunami,",
						"          sig = features.properties.sig,",
						"          type = features.properties.type,",
						"          coords = features.geometry.coordinates",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(time_utc = toTimestamp(toString(round(properties_time / 1000)), 's'),",
						"          updated_utc = toTimestamp(toString(round(properties_updated / 1000)), 's'),",
						"          lon = toFloat(coords[1]),",
						"          lat = toFloat(coords[2]),",
						"          depth_km = toFloat(coords[3])) ~> derive1",
						"derive1 filter(!isNull(lon) && !isNull(lat) && (isNull(mag) || (mag >= -1 && mag <= 10))) ~> filterdq",
						"filterdq split(mag > 5.0,",
						"     disjoint: false) ~> split1@(Alerts, Regular)",
						"split1@Alerts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"split1@Regular sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> regular"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_adls_quakes')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_alerts')]",
				"[concat(variables('factoryId'), '/datasets/ds_sql_quakes')]"
			]
		}
	]
}